import java_cup.runtime.*;

parser code  {: 
  public void report_error(String message, Object info) {
    StringBuffer m = new StringBuffer("Error ");

    if (info instanceof java_cup.runtime.Symbol) 
      m.append( "("+info.toString()+")" );
     
    m.append(" : "+message);
   
    System.out.println(m);
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }
:};

terminal INT, DOUBLE, FOR, RETURN, VOID;
terminal AUTO, BREAK, CASE, CHAR, CONST, CONTINUE, DEFAULT, DO, ELSE, ENUM;
terminal EXTERN, FLOAT, GOTO, IF, INLINE, LONG;
terminal REGISTER, SHORT, SIGNED, SIZEOF, STATIC, STRUCT;
terminal SWITCH, TYPEDEF, UNION, UNSIGNED, VOLATILE, WHILE;
terminal _BOOL, _COMPLEX, _IMAGINARY;

terminal LSHIFTEQUAL, RSHIFTEQUAL, ELLIPSES;
terminal STAREQUAL, DIVEQUAL, MODEQUAL, PLUSEQUAL, MINUSEQUAL;
terminal PLUSPLUS, MINUSMINUS, EQUALEQUAL;
terminal ARROW, LSHIFT, RSHIFT, LESSEQUAL, GREATEREQUAL, BITANDEQUAL, BITOREQUAL, BITXOREQUAL, NOTEQUAL;
terminal AND, OR, SHARPSHARP;
terminal LPAREN, RPAREN, LBRACE, RBRACE, LBRACK, RBRACK;
terminal BITAND, STAR, PLUS, MINUS, TILDE, DIV,MOD, NOT, DOT;
terminal COMMA, ASSGN, LESS, GREATER, BITOR, BITXOR, QUESTION, COLON, SEMICOLON, SHARP;


terminal java.lang.Number INTEGER_LITERAL;
terminal java.lang.Number FLOATING_POINT_LITERAL;
terminal java.lang.String IDENTIFIER; 
non terminal fake;
fake ::= INT;
